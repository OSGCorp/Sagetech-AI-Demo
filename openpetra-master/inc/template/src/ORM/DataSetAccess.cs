// Auto generated by nant generateORM from a template at inc\template\src\ORM\DataSetAccess.cs
//
// Do not modify this file manually!
//
{#GPLFILEHEADER}

using Ict.Common;
using Ict.Common.Data;
using Ict.Common.Verification;
using Ict.Common.DB;
using Ict.Petra.Shared;
using System;
using System.Data;
using System.Data.Odbc;
using System.Diagnostics;
using System.Collections.Generic;
{#USINGNAMESPACES}

namespace {#NAMESPACE}.Access
{
    {#CONTENTDATASETSANDTABLESANDROWS}
}

{##TYPEDDATASET}
 /// auto generated
[Serializable()]
public class {#DATASETNAME}Access
{
    {#SUBMITCHANGESFUNCTION}
}

{##SUBMITCHANGESFUNCTION}

/// auto generated
static public void SubmitChanges({#DATASETNAME} AInspectDS, TDataBase ADataBase = null, TDBTransaction AWriteTransaction = null)
{
    if (AInspectDS == null)
    {
        return;
    }

    bool NewTransaction;
    TDataBase db = DBAccess.Connect("{#DATASETNAME}SubmitChanges", ADataBase);
    TDBTransaction SubmitChangesTransaction = null;

    if ((AWriteTransaction != null) && (AWriteTransaction.IsolationLevel == IsolationLevel.Serializable))
    {
        NewTransaction = false;
        SubmitChangesTransaction = AWriteTransaction;
    }
    else
    {
        SubmitChangesTransaction = db.GetNewOrExistingTransaction(IsolationLevel.Serializable, out NewTransaction);
    }

    string SavingOperation = "No action taken yet!";

    try
    {
        {#SUBMITCHANGESDELETE}
        {#SUBMITCHANGESINSERT}
        {#SUBMITCHANGESUPDATE}

        if (AInspectDS.ThrowAwayAfterSubmitChanges)
        {
            AInspectDS.Clear();
        }

        if (NewTransaction)
        {
            SubmitChangesTransaction.Commit();
        }
        
        if (ADataBase == null)
        {
            db.CloseDBConnection();
        }
    }
    catch (Exception e)
    {
        TLogging.Log(
            String.Format("An Exception occurred during the saving of Typed DataSet '{#DATASETNAME}' in {0} DB Transaction!  " +
            Utilities.GetThreadAndAppDomainCallInfo() + Environment.NewLine +
            "The last action that was taken and which has caused the Exception is this: '{1}'." + Environment.NewLine + 
            "Exception Details: {2}" + Environment.NewLine + "StackTrace: {3}",
            (NewTransaction ? "a separately established" : "an already running"),
            SavingOperation, e.ToString(), new StackTrace().ToString()));
            
        if (NewTransaction)
        {
            SubmitChangesTransaction.Rollback();
        }

        throw;
    }
}

{##SUBMITCHANGES}
{#IFNDEF UPDATESEQUENCEINOTHERTABLES}
if (AInspectDS.{#TABLEVARIABLENAME} != null)
{
    SavingOperation = "Table: " + AInspectDS.{#TABLEVARIABLENAME}.TableName + "; Action: TTypedDataAccess.eSubmitChangesOperations.{#SQLOPERATION}";
    
    TTypedDataAccess.SubmitChanges(AInspectDS.{#TABLEVARIABLENAME}, SubmitChangesTransaction,
        TTypedDataAccess.eSubmitChangesOperations.{#SQLOPERATION},
        UserInfo.GetUserInfo().UserID{#SEQUENCENAMEANDFIELD});
}
{#ENDIFN UPDATESEQUENCEINOTHERTABLES}
{#IFDEF UPDATESEQUENCEINOTHERTABLES}
if (AInspectDS.{#TABLEVARIABLENAME} != null)
{
    SortedList<Int64, Int32> OldSequenceValuesRow = new SortedList<Int64, Int32>();
    Int32 rowIndex = 0;

    foreach ({#TABLEROWTYPE} origRow in AInspectDS.{#TABLEVARIABLENAME}.Rows)
    {
        if (origRow.RowState != DataRowState.Deleted && origRow.{#SEQUENCEDCOLUMNNAME} < 0)
        {
            OldSequenceValuesRow.Add(origRow.{#SEQUENCEDCOLUMNNAME}, rowIndex);
        }

        rowIndex++;
    }

    if (AInspectDS.{#TABLEVARIABLENAME} != null)
    {
        SavingOperation = "Table: " + AInspectDS.{#TABLEVARIABLENAME}.TableName + "; Action: TTypedDataAccess.eSubmitChangesOperations.{#SQLOPERATION}";
        
        TTypedDataAccess.SubmitChanges(AInspectDS.{#TABLEVARIABLENAME}, SubmitChangesTransaction,
            TTypedDataAccess.eSubmitChangesOperations.{#SQLOPERATION},
            UserInfo.GetUserInfo().UserID{#SEQUENCENAMEANDFIELD});
    }
    {#UPDATESEQUENCEINOTHERTABLES}
}
{#ENDIF UPDATESEQUENCEINOTHERTABLES}

{##UPDATESEQUENCEINOTHERTABLES}
if (AInspectDS.{#REFERENCINGTABLENAME} != null)
{
    foreach ({#REFERENCINGTABLEROWTYPE} otherRow in AInspectDS.{#REFERENCINGTABLENAME}.Rows)
    {
        if ((otherRow.RowState != DataRowState.Deleted) && {#TESTFORNULL}otherRow.{#REFCOLUMNNAME} < 0)
        {
            otherRow.{#REFCOLUMNNAME} = AInspectDS.{#TABLEVARIABLENAME}[OldSequenceValuesRow[otherRow.{#REFCOLUMNNAME}]].{#SEQUENCEDCOLUMNNAME};
        }
    }
}
